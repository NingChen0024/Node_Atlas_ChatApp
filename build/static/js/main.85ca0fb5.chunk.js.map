{"version":3,"sources":["images/headImage.png","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","margin","spacing","width","MainPage","classes","useState","newMessage","setNewMessage","newName","setNewName","messageList","setMessageList","message","setMessage","isFirstRun","useRef","useEffect","axios","get","then","res","console","log","data","catch","err","current","post","response","Box","mt","className","alignItems","justifyContent","src","require","noValidate","autoComplete","TextField","id","label","variant","value","onChange","e","target","Button","color","size","onClick","undefined","name","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,uC,qKCOrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,OACPD,QAAS,QA4FAE,MAvFf,WAEE,IAAMC,EAAUR,IAFE,EAGkBS,qBAHlB,mBAGXC,EAHW,KAGCC,EAHD,OAIYF,qBAJZ,mBAIXG,EAJW,KAIFC,EAJE,OAKoBJ,mBAAS,IAL7B,mBAKXK,EALW,KAKEC,EALF,OAMYN,mBAAS,IANrB,mBAMXO,EANW,KAMFC,EANE,KAOZC,EAAaC,kBAAO,GAoC1B,OAlCAC,qBAAU,WACRC,IAAMC,IAAI,kCACTC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,MAChBZ,EAAeS,EAAIG,SAEpBC,OAAM,SAAAC,GACLJ,QAAQC,IAAIG,SAIhBT,qBAAU,WAEJF,EAAWY,QACbZ,EAAWY,SAAU,EAIvBT,IAAMU,KAAK,iCAAkCf,GAC5CO,MAAK,SAACS,GACLP,QAAQC,IAAIM,MAEbJ,OAAM,SAAAC,GACLJ,QAAQC,IAAIG,QAEb,CAACb,IAUF,6BACE,kBAACiB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACD,EAAA,EAAD,CAAKE,UAAW3B,EAAQL,KAAMiC,WAAW,SAASC,eAAe,UAC/D,yBAAKC,IAAMC,EAAQ,OAErB,0BAAMJ,UAAW3B,EAAQL,KAAMqC,YAAU,EAACC,aAAa,OACrD,kBAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,OACNC,QAAQ,WACRC,MAAOlC,EACPmC,SAAU,SAAAC,GAAC,OAAInC,EAAWmC,EAAEC,OAAOH,UANvC,IAOK,6BACH,kBAACJ,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,UACNC,QAAQ,WACRC,MAAOpC,EACPqC,SAAU,SAAAC,GAAC,OAAIrC,EAAcqC,EAAEC,OAAOH,UACtC,6BACF,kBAACI,EAAA,EAAD,CACEf,UAAW3B,EAAQL,KACnB0C,QAAQ,YACRM,MAAM,YACNC,KAAK,QACLC,QAjCU,WAClB5B,QAAQC,IAAIZ,QACMwC,IAAZ1C,QAAwC0C,IAAf5C,GAC7BO,EAAW,CAACsC,KAAM3C,EAASI,QAASN,MAyBhC,SAWAI,EAAY0C,KAAI,SAACxC,GAAD,OACd,6BACE,2BAAIA,EAAQuC,MACZ,2BAAIvC,EAAQA,gB,MCnFXyC,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACLhD,QAAQgD,MAAMA,EAAMzD,c","file":"static/js/main.85ca0fb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headImage.c4c70673.png\";","import React, {useState, useEffect, useRef }  from 'react'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n      spacing: 5\n    },\n  },\n}))\n\nfunction MainPage() {\n  \n  const classes = useStyles()\n  const [newMessage, setNewMessage] = useState()\n  const [newName, setNewName] = useState()\n  const [messageList, setMessageList] = useState([])\n  const [message, setMessage] = useState({})\n  const isFirstRun = useRef(true)\n  \n  useEffect(() => {\n    axios.get('http://localhost:3000/messages')\n    .then(res => {\n      console.log(res.data)\n      setMessageList(res.data)\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  })\n\n  useEffect(() => {\n\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n\n    axios.post('http://localhost:3000/messages', message)\n    .then((response) => {\n      console.log(response)\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }, [message])\n\n  const handleClick = () => {\n    console.log(messageList)\n    if (!(newName === undefined || newMessage === undefined)){\n      setMessage({name: newName, message: newMessage})\n    }\n  }\n\n  return (\n    <div>\n      <Box mt={3}>\n        <Box className={classes.root} alignItems=\"center\" justifyContent=\"center\">\n          <img src={ require('../images/headImage.png')}/>\n        </Box>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n          <TextField \n            id=\"standard-basic\" \n            label=\"Name\" \n            variant=\"outlined\" \n            value={newName} \n            onChange={e => setNewName(e.target.value)} \n          /> <br></br>\n          <TextField \n            id=\"outlined-basic\" \n            label=\"Message\" \n            variant=\"outlined\" \n            value={newMessage} \n            onChange={e => setNewMessage(e.target.value)}\n          /><br></br>\n          <Button  \n            className={classes.root} \n            variant=\"contained\" \n            color=\"secondary\" \n            size=\"small\"\n            onClick={handleClick}\n          >\n            POST\n          </Button>\n        </form>\n        {\n          messageList.map((message) => (        \n            <div>\n              <p>{message.name}</p>\n              <p>{message.message}</p>\n            </div>\n          ))\n        }\n      </Box>\n    </div>\n  )\n}\n\nexport default MainPage\n\n","import React from 'react';\nimport Main from './components/MainPage'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}